---
title: "Blog Project"
subtitle: "Wrangling"
author: "Rachel, Josh, Sheryl"
date: "2025-04-17"
format: pdf
---


```{r}
#| label: setup
#| include: false

knitr::opts_chunk$set(eval = FALSE, message = FALSE)

# improve digit and NA display 
options(scipen = 1, knitr.kable.NA = '')

# load packages
library(tidyverse)
library(tidytext)
library(dplyr)
library(quanteda)
library(purrr)
library(broom)
#summary statistics - flesch,kincaid,mean sentence.
library(quanteda.textstats)
#topic models
library(topicmodels)
library(ggrepel)

```


```{r}
#| label: import-data

# We starting with the data from our Shiny project
load("raw-data/inaugural_speech_analysis.Rdata")
load("raw-data/inaugural_speeches.Rdata")
load("raw-data/president-names.Rdata")

```


```{r}
#| label: sentiment-freq-era-wrangling


# Simply save dataset needed for sentiment
save(inaug_words_sentiment, 
     file = "data/inaug_words_sentiment.Rdata")

# Biword frequency by era
# Add historical eras
# bigram_count <- bigram_count |> 
#   mutate(era = case_when(
#     date <= 1829 ~ "1789–1829\nEarly Republic",
#     date <= 1869 ~ "1830–1869\nAntebellum & Civil War",
#     date <= 1919 ~ "1870–1919\nReconstruction to WWI",
#     date <= 1969 ~ "1920–1969\nInterwar to Civil Rights",
#     TRUE         ~ "1970–2009\nPost-Watergate to Obama"
#   ))

# bigram_count <- bigram_count |> 
#   mutate(era = case_when(
#      date <= 1815 ~ "1789–1815\nAmerican Revolution and Early Republic",
#      date <= 1861 ~ "1816–1861\nExpansion and Reform",
#      date <= 1877 ~ "1862–1877\nCivil War and Reconstruction",
#      date <= 1914 ~ "1878–1914\nGilded Age and Progressive Era",
#      date <= 1929 ~ "1915–1929\nProgressive Era to New Era",
#      date <= 1945 ~ "1930–1945\nGreat Depression and WWII",
#      date <= 1968 ~ "1946–1968\nPost War United States"
#      TRUE         ~ "1969–2009\nPost-Watergate to Obama"
#    ))

# bigram_count <- bigram_count |> 
#   mutate(era = case_when(
#     date <= 1815 ~ "1789–1815\nRevolution & Early Republic",
#     date <= 1865 ~ "1816–1865\nExpansion, Reform & Civil War",
#     date <= 1900 ~ "1866–1900\nGilded Age & Progressive Beginnings",
#     date <= 1945 ~ "1901–1945\nProgressivism, Depression & WWII",
#     date <= 1969 ~ "1946–1969\nPostwar & Civil Rights",
#     TRUE         ~ "1970–2009\nPost-Watergate to Obama"
#   ))


bigram_count <- bigram_count |> 
  mutate(era = case_when(
    date <= 1815 ~ "1789–1815\nRevolution & Early Republic",
    date <= 1865 ~ "1816–1865\nExpansion, Reform & Civil War",
    date <= 1919 ~ "1866–1919\nReconstruction to WWI",
    date <= 1945 ~ "1920–1945\nInterwar & WWII",
    date <= 1969 ~ "1946–1969\nPostwar & Civil Rights",
    TRUE         ~ "1970–2009\nPost-Watergate to Obama"
  ))



# 1. Get top 8 biwords per era with total count > 2
top_biwords_era <- bigram_count |> 
  group_by(era, word1, word2) |> 
  summarize(total = sum(n), .groups = "drop") |> 
  filter(total > 2) |> 
  group_by(era) |> 
  slice_max(total, n = 8, with_ties = FALSE) |> 
  ungroup() |> 
  mutate(
    clean_biword = paste(word1, word2),
    biword = reorder_within(clean_biword, total, era)
  )

# 2. Mark biwords that appear in more than one era
repeated_biwords <- top_biwords_era |> 
  count(clean_biword) |> 
  filter(n > 1) |> 
  pull(clean_biword)

top_biwords_era <- top_biwords_era |> 
  mutate(
    shared = clean_biword %in% repeated_biwords,
    color = ifelse(shared, "#B22234", "steelblue")
  )

# 3. Normalize counts by total bigrams per era
total_bigrams_per_era <- bigram_count |> 
  group_by(era) |> 
  summarize(era_total = sum(n), .groups = "drop")

top_biwords_era <- top_biwords_era |> 
  left_join(total_bigrams_per_era, by = "era") |> 
  mutate(prop = total / era_total)

save(top_biwords_era, 
     file = "data/top_biwords_era.Rdata")


```





```{r}
#| label: readability-stats(Flesch,Kincaid,meanSentence)

inaug_speeches_all_clean <- inaug_speeches_all_clean |>
  mutate(sentences = nsentence(text))

readability_stats <- textstat_readability(inaug_speeches_all_clean$text, measure = c("Flesch", "Flesch.Kincaid", "meanSentenceLength"))

# check
nrow(readability_stats)
nrow(inaug_speeches_all_clean)

# Merge readability stats with inaug_speeches_all_clean by row
#bind_cols : binds rows in order of df 

inaug_speeches_master <- bind_cols(inaug_speeches_all_clean, readability_stats)

#check
nrow(inaug_speeches_master)
nrow(inaug_words_sentiment)

#left_join uses variables (date, president) as the join key // automatic
inaug_speeches_master <- left_join(inaug_speeches_master, inaug_words_sentiment)




```


```{r}
#| label: clustering


### Flesch-Kincaid vs Sentiment ###
flesch_sentiment <- inaug_speeches_master |>
  select(Flesch, sentiment)

#set seed for reproducibility
set.seed(420)

# Optimal # of clustering is 4-6. VERIFIED.
flesch_sentiment_kmeans4 <- flesch_sentiment |>
  kmeans(centers = 6, nstart = 20)

#add cluster results to original data
inaug_speeches_master <- inaug_speeches_master |>
  mutate(flesch_sentiment_cluster = flesch_sentiment_kmeans4$cluster)




### Flesch-Kincaid vs Sentiment ###
fleschKin_sentiment <- inaug_speeches_master |>
  select(Flesch.Kincaid, sentiment)

# Optimal # of clustering is 4-6. VERIFIED
fleschKin_sentiment_kmeans4 <- fleschKin_sentiment |>
  kmeans(centers = 6, nstart = 20)

#add cluster results to original data
inaug_speeches_master <- inaug_speeches_master |>
  mutate(flesch_kin_sentiment_cluster = fleschKin_sentiment_kmeans4$cluster)

```

```{r}
#| label: elbow-plot

# URGENT NOTE: This elbow plot is used for multiple different charts. JUST SWAP OUT THE DATA SET AND CHANGE THE TITLE.
elbow_plot <- tibble(k = 1:10) |>
  mutate( 
    kmeans_results = purrr::map(k, ~kmeans(flesch_sentiment, centers = .x, nstart=20)),
    glanced = purrr::map(kmeans_results, glance)) |>
    unnest(cols = c(glanced))


# construct elbow plot
ggplot(elbow_plot, aes(x = k, y = tot.withinss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = 1:10) +
labs(
  x = "Number of clusters (k)",
  y = "Total within-cluster sum of squares",
  title = "Optimal Clustering: Flesch-Kincaid vs. Sentiment")
```


```{r}
#| label: Plotting-Flesch vs.Sentiment

ggplot(inaug_speeches_master, aes(y = Flesch, x = sentiment)) +
  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "pink")) +
  geom_point(aes(color = factor(flesch_sentiment_cluster))) +
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  labs(y = "Flesch Reading Level",
       x = "Sentiment Score",
       title = "Inaugural Address Analysis",
       subtitle = "Flesch Reading Level vs Sentiment Score",
       color = "Cluster") +
  theme_minimal()

```

```{r}
#| label: Plotting-Flesch-Kincaid-vs-Sentiment

ggplot(inaug_speeches_master, aes(y = Flesch.Kincaid, x = sentiment)) +
  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "pink")) +
  geom_point(aes(color = factor(flesch_kin_sentiment_cluster))) +
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  labs(y = "Flesch-Kincaid Grade Level",
       x = "Sentiment Score",
        title = "Inaguaral Address Analysis",
       subtitle = "Flesch-Kincaid Grade Level vs Sentiment Score",
       color = "Cluster") +
  theme_minimal()


```


```{r}
#| label: Flesh-Kincaid-over-time

ggplot(inaug_speeches_master, aes(x = date, y = Flesch.Kincaid)) +
  geom_point() +
  geom_smooth( method = "loess", se = TRUE)+
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  geom_vline(xintercept = 1925, linetype = "dashed", color = "red") +
  geom_vline(xintercept = 1949, linetype = "dashed", color = "blue") +
  labs(title = "Inagural Speech Complexity Over Time",
    y = "Flesch-Kincaid Grade Level",
       x = "Year") +
  theme_minimal()

```



```{r}
# Top 5 presidents with the hardest inaugural speech (highest Flesch-Kincaid score)
 
 top5_highpress <- inaug_speeches_master |>
  arrange(desc(Flesch.Kincaid)) |>
  select(president, date, Flesch.Kincaid) |>
  slice_head(n = 5)
top5_highpress
 
 
# Top 5 Presidents with the easiest inaugural speech (lowest Flesch-Kincaid score)
 top5_lowpress <- inaug_speeches_master |>
  arrange(Flesch.Kincaid) |>
  select(president, date, Flesch.Kincaid) |>
  slice_head(n = 5)
top5_lowpress
 
 # table displaying the top 5 presidents with the highest Flesch-Kincaid score 
 top5_lowpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()

 
  # table displaying the top 5 presidents with the lowest Flesch-Kincaid scores 
  top5_highpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()
  
```



```{r}
# pivoting the data to obtain the presidents that served two terms
sec_terms <- inaug_speeches_master |>
  select(president, term, sentiment_avg) |>
  pivot_wider(names_from = term, 
              values_from = sentiment_avg, 
              names_prefix = "") |>
  rename(first_term = `1st Term`,
         second_term = `2nd Term`,
         third_term = `3rd Term`,
         fourth_term = `4th Term`) |>
  select(-third_term, -fourth_term) |>
  rename(sent_first = `first_term`,
         sent_second = `second_term`) |>
  filter(!is.na(sent_second))


sec_terms2 <- inaug_speeches_master |>
  select(president, term, Flesch.Kincaid) |>
  pivot_wider(names_from = term, 
              values_from = Flesch.Kincaid, 
              names_prefix = "") |>
  rename(first_term = `1st Term`,
         second_term = `2nd Term`,
         third_term = `3rd Term`,
         fourth_term = `4th Term`) |>
  select(-third_term, -fourth_term) |>
    rename(fk_first = `first_term`,
         fk_second = `second_term`) |>
  filter(!is.na(fk_second))

# joining both datasets

sec_terms_sent_fk <- left_join(sec_terms, sec_terms2, by = "president")

```

```{r}
# calculating the differences from the first term to the second term of presidents in terms of both sentiment score and flesch-kincaid scores

sec_terms_diff <- sec_terms_sent_fk |> 
  mutate(
    sentiment_diff = sent_second - sent_first,
    fk_diff = fk_second - fk_first
  ) |>
  select(president, sentiment_diff, fk_diff)

 
 # table displaying the calculated difference in sentiment scores and Flesch-Kincaid Scores
  sec_terms_diff |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Sentiment Score Difference", "Flesch-Kincaid Score Difference")) |>
  kable_styling()
```


```{r}
#| label: Plotting Mean Sentence Length vs. Sentiment

# Set seed for reproducibility
set.seed(100)

# Perform k-means clustering
msl_kmeans_results <- inaug_speeches_master |> 
  select(meanSentenceLength, sentiment_avg) |> 
  kmeans(centers = 6, nstart = 10)

# Manually add cluster assignments to original dataset
msl_clustered <- inaug_speeches_master |> 
  mutate(cluster_2 = factor(msl_kmeans_results$cluster))

# Create a dataframe of cluster centroids
msl_cluster_centers <- as_tibble(msl_kmeans_results$centers) |> 
  mutate(cluster_2 = factor(row_number()))


# Interactive plot with plotly
MS_s <- ggplot(msl_clustered, aes(x = meanSentenceLength, y = sentiment_avg)) +
  geom_point(aes(color = cluster_2, 
                 text = paste("President:", president,
                              "<br>Sentiment:", sentiment_avg,
                              "<br>Mean Sentence Length:", meanSentenceLength,
                              "<br>Cluster:", cluster_2)), 
             alpha = 0.6) +
  geom_label(data = msl_cluster_centers, 
             aes(label = cluster_2, 
                 text = paste("Cluster Center:", cluster_2)), 
             size = 3) +
  labs(y = "Average Sentiment Score",
       x = "Mean Sentence Length",
       title = "Inaugural Address Analysis",
       caption = "Average Sentiment Score vs Mean Sentence Length",
       color = "Cluster") +
  theme_minimal()

ggplotly(MS_s, tooltip = "text")
```



```{r}

#| label: save-datasets

save(inaug_speeches_master,
     file = "data/inaugural_speeches_master.Rdata")

save(top5_highpress,
     file = "data/top5_highpress.Rdata")

save(top5_lowpress,
     file = "data/top5_lowpress.Rdata")

save(sec_terms_sent_fk,
     file = "data/sec_terms_sent_fk.Rdata")

save(sec_terms_diff,
     file = "data/sec_terms_diff.Rdata")

save(inaug_speeches_master,
     file = "data/inaug_speeches_master")

save(msl_clustered,
     file = "data/msl_clustered")

save(msl_cluster_centers,
     file = "data/msl_cluster_centers")

```
