---
title: "Sentiment Analysis of Inaugural Speeches"
subtitle: "Comparing the Sentiment of Presidential Speeches Over Time"
author: 
- "Rachel Hubley"
- "Sheryl Solorzano"
- "Josh Balderas"
abstract: "This blog focuses on analyzing the inaugural speeches of U.S. presidents to determine how the language used in the U.S. Presidential inaugural addresses and the complexity of inaugural speeches in terms of readability have changed over time. By calculating the readability score with the Flesh-Kincaid formula across different inaugural speeches of presidents that serve between 1789 and 2009, we aim to observe whether inaugural speeches have become easier or harder to understand. Also, we aim to observe how presidential inaugural speeches have changed in terms of emotional tone over time."

#A brief abstract summarizing your project is required here. This abstract, along with the first image or figure in your blog, will be used as a preview to your blog on the course's landing page for all the blogs."
---

```{r}
#| label: setup
#| include: false

# Improve digit display and NA display for kable tables
options(scipen = 1, knitr.kable.NA = "")

# Load necessary packages
library(tidyverse)
library(knitr)
library(kableExtra)
library(ggplot2)
library(plotly)

```

# Sentiment Analysis Over Time

```{r}
#| label: fig-sentiment
#| fig-cap: "AFINN Sentiment Scores of Inaugural Speeches"


# Load data
load("data/inaug_words_sentiment.Rdata")
load("data/inaugural_speeches_master.Rdata")

# Plot bar chart
p <- ggplot(inaug_words_sentiment, aes(
  x = date, y = sentiment_avg,
  text = paste("President:", president,
               "<br>Year:", date,
               "<br>Average Sentiment:", round(sentiment_avg, 3)),
  fill = sentiment_avg)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
  labs(
    title = "AFINN Sentiment Scores of Inaugural Speeches",
    x = "Year",
    y = "Average Sentiment"
  ) +
  theme_minimal()

ggplotly(p, tooltip = "text")

```

# Word Frequency by Era

```{r}
#| label: fig-freq-era
#| fig-cap: "Top Biwords in Inaugural Speeches by Era"
#| layout-ncol: 1
#| fig-width: 18
#| fig-height: 10
#| out-width: 100%
#| fig-align: center


load("data/top_biwords_era.Rdata")

ggplot(top_biwords_era, aes(x = biword, y = total, fill = biword)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  facet_wrap(~ era, scales = "free_y") +
  labs(x = NULL, y = "Bigram Count") +
  theme_minimal() +
  theme(
    strip.text = element_text(face = "bold", size = 18),
    axis.text = element_text(size = 14),
    plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
    plot.caption = element_text(size = 10, hjust = 0.5)
  )

```


# Mean Sentence Length over time 

```{r}
#| label: Mean Sentence Length over time
#| fig-cap: "Figure 4: This bar char displays the sentence mean in each president's inaugural speech over time"


ms <- ggplot(inaug_speeches_master, aes(
  x = date, y = meanSentenceLength,
  text = paste("President:", president,
               "<br>Year:", date,
               "<br>Mean Sentence Length:", round(meanSentenceLength, 3)),
  fill = meanSentenceLength)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
  labs(
    title = "Mean Sentence Length of Inaugural Speeches",
    x = "Year",
    y = "Mean Sentence Length"
  ) +
  theme_minimal()

ggplotly(ms, tooltip = "text")

```


[summary of the figure]


# Flesch-Kincaid Scores over Time

```{r}
#| label: Flesch-Kincaid Scores over time
#| fig-cap: "Figure 5: This bar char displays the complexity of presidents' inaugural speeches with their respective Flesch-Kincaid scores over time"


fk <- ggplot(inaug_speeches_master, aes(
  x = date, y = Flesch.Kincaid,
  text = paste("President:", president,
               "<br>Year:", date,
               "<br>Flesch.Kincaid:", round(Flesch.Kincaid, 3)),
  fill = Flesch.Kincaid)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
  labs(
    title = "Flesch-Kincaid Score of Inaugural Speeches",
    x = "Year",
    y = "Flesch-Kincaid Score"
  ) +
  theme_minimal()

ggplotly(fk, tooltip = "text")
```

[summary of the figure]


```{r}
#| label: Top 5 presidents with highest/lowest scores

# Loading the data
load("data/top5_lowpress.Rdata")
load("data/top5_highpress.Rdata")


# table displaying the top 5 presidents with the highest Flesch-Kincaid score 
 top5_lowpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()

# table displaying the top 5 presidents with the lowest Flesch-Kincaid scores 
  top5_highpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()
  
```
```{r}
#| Fig-cap: "..."

#loading the data
load("data/sec_terms_sent_fk.Rdata")

# Inaugural Address Complexity Change from First to Second Term for presidents that served two terms
q <- ggplot(sec_terms_sent_fk, aes(x = fk_first, y = fk_second,
                                   text = paste("President:", 
                                                    president,
                                                    "<br> 1st Term FK Score:",
                                                    fk_first,
                                                "<br> 2nd Term FK Score:",
                                                fk_second))) +
  geom_point(aes(color = president, size = 0.1)) + 
  labs(title = "Inaugural Address Complexity Change from First to Second Term",
       x = "First Term Flesch-Kincaid Score",
       y = "Second Term Flesch-Kincaid Score") +
  theme_minimal()

ggplotly(q, tooltip = "text") |>
  layout(showlegend = FALSE)


# Inaugural Address Complexity Change from First to Second Term for presidents that served two terms
q <- ggplot(sec_terms_sent_fk, aes(x = sent_first, y = sent_second,
                                   text = paste("President:", 
                                                    president,
                                                    "<br> 1st Term Sentiment Score:",
                                                    round(sent_first, 3),
                                                "<br> 2nd Term Sentiment Score:",
                                                round(sent_second, 3) ) )) +
  geom_point(aes(color = president, size = 0.1)) + 
  labs(title = "Inaugural Address Sentiment Change from First to Second Term",
       x = "First Term Sentiment Avg",
       y = "Second Term Sentiment Avg") +
  theme_minimal()

# Removing the legend 
ggplotly(q, tooltip = "text") |>
  layout(showlegend = FALSE)
```



```{r}
# loading the data
load("data/sec_terms_diff.Rdata")

# calculating the differences from the first term to the second term of presidents in terms of both sentiment score and flesch-kincaid scores

sec_terms_diff <- sec_terms_sent_fk |> 
  mutate(
    sentiment_diff = sent_second - sent_first,
    fk_diff = fk_second - fk_first
  ) |>
  select(president, sentiment_diff, fk_diff)

 
 # table displaying the calculated difference in sentiment scores and Flesch-Kincaid Scores
  sec_terms_diff |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Sentiment Score Difference", "Flesch-Kincaid Score Difference")) |>
  kable_styling()
```

Sentiment Score difference:
 - **Postive Difference Value**: The second-term inaugural speech was more postive than the first term that preseident served
 - **Negative Difference Value**: The second-term inaugural speech was less postive or more negative than the first term speech of that president
 - **Zero or close to Zero Difference Value**: The sentiment/tone remained pretty consistent 
 
 
 Flesch-Kincaid Score Difference
 - **Postive Difference Value**: The second-term inaugural speech was more complex than the first term that preseident served
 - **Negative Difference Value**: The second-term inaugural speech was simpler and easier to understand than the first term speech of that president
 - **Zero or close to Zero Difference Value**: The complexity of the inaugural speech remained pretty consistent
 

# Readability Analysis

## Introduction

Readability analysis helps us understand how easy (or difficult) a text is to read. Two common measures are the Flesch Reading Ease (FRE) and Flesch-Kincaid Grade Level (FKGL)

## Flesch Reading Ease (FRE)

$$
\text{FRE} = 206.835 - 1.015 \times \left( \frac{\text{Total Words}}{\text{Total Sentences}} \right) - 84.6 \times \left( \frac{\text{Total Syllables}}{\text{Total Words}} \right)
$$

This score rates text on a 0 to 100 scale. A higher score means the text is easier to read.

-   **90--100**: Very easy (like a comic book)\
-   **60--70**: Standard (like everyday news articles)\
-   **0--30**: Very difficult (like academic papers)

## Flesch-Kincaid Grade Level (FKGL)

$$
\text{FKGL} = 0.39 \times \left( \frac{\text{Total Words}}{\text{Total Sentences}} \right) + 11.8 \times \left( \frac{\text{Total Syllables}}{\text{Total Words}} \right) - 15.59
$$

This score estimates the U.S. school grade level needed to understand the text.

-   A score of **8.0** means the average 8th grader should be able to understand it.
-   A score of **12.0** suggests it matches a high school senior's reading level.

In this project, we calculate these scores for presidential inaugural speeches to see how the complexity of presidential language has changed over time.

## Text Analysis

### FRE vs. Sentiment

To better understand the relationship between writing style and emotional tone in the presidential inaugural addresses, we compare the Flesch Reading Ease scores with sentiment scores calculated for each speech.

The Flesch score measures how easy a text is to read, while the sentiment score captures the overall positivity or negativity of the language. By analyzing these two metrics together, we can apply clustering techniques to group speeches with similar readability and sentiment profiles. These clusters help us identify distinct subgroups of inaugural addresses --- for example, groups of speeches that are both highly readable and optimistic, or more complex and somber --- offering new insights into how presidents have tailored their language to the moment in history.

```{r}
#| label: Plotting-Flesch_Sentiment

p <- ggplot(inaug_speeches_master, aes(y = Flesch, 
                                       x = sentiment, 
                                       text = paste("President:", 
                                                    president,
                                                    "<br>Year:", 
                                                    date,
                                                    "<br>Sentiment Score:", 
                                                    sentiment,
                                                    "<br>Flesch Score:",
                                                    Flesch))
            ) +
  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "pink")) +
  geom_point(aes(color = factor(flesch_sentiment_cluster))) +
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  labs(y = "Flesch Reading Level",
       x = "Sentiment Score",
       title = "Inaugural Address Analysis",
       subtitle = "Flesch Reading Level vs Sentiment Score",
       color = "Cluster") +
  theme_minimal()

ggplotly(p, tooltip = "text")


```


Using the clustering analysis, some light interpretation can be made from the groupings.

-   **Cluster 1**: Presidents have average sentiment score with low readability.

-   **Cluster 2**: Presidents have higher sentiment score with low readability.

-   **Cluster 3**: Presidents have higher sentiment score with high readability.

-   **Cluster 4**: Presidents have low sentiment scores with high readability.

-   **Cluster 5**: Presidents on the lower end of the sentiment score spectrum. Readability ranges from standard to easy.

-   **Cluster 6**: Presidents in this cluster have the highest sentiment score spectrum. Readability ranges from 30-40.

### FKGL vs. Sentiment

In addition to examining readability through the Flesch score, we also analyze the Flesch-Kincaid Grade Level (FKGL) in relation to sentiment scores for each inaugural address. The FKGL estimates the U.S. school grade level required to understand a speech, providing a direct measure of textual complexity. By comparing FKGL to sentiment scores, we explore how the sophistication of presidential language interacts with the emotional tone conveyed. Using clustering methods to group speeches based on their grade level and sentiment characteristic offering a nuanced view of how different presidents have communicated their visions to the nation.

```{r}
#| label: Plotting-Flesch-Kincaid-vs-Sentiment


p <- ggplot(inaug_speeches_master, aes(y = Flesch.Kincaid, x = sentiment,
                                        text = paste("President:", 
                                                    president,
                                                    "<br>Year:", 
                                                    date,
                                                    "<br>Sentiment Score:", 
                                                    sentiment,
                                                    "<br>FK Score:",
                                                    Flesch.Kincaid))) +
  scale_color_manual(values = c("red", "blue", "green", "purple", "orange", "pink")) +
  geom_point(aes(color = factor(flesch_kin_sentiment_cluster))) +
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  labs(y = "Flesch-Kincaid Grade Level",
       x = "Sentiment Score",
        title = "Inaguaral Address Analysis",
       subtitle = "Flesch-Kincaid Grade Level vs Sentiment Score",
       color = "Cluster") +
  theme_minimal()

ggplotly(p, tooltip = "text")
```

\[Analysis\]

### FKGL vs. Time

We also examine the relationship between the Flesch-Kincaid Grade Level (FKGL) and time to track how the complexity of presidential inaugural speeches has changed. Overall, we find a clear trend that speech complexity has decreased over time, with more recent presidents using simpler, more accessible language compared to earlier eras.

```{r}
#| label: Flesh-Kincaid-over-time


p <- ggplot(inaug_speeches_master, aes(x = date, y = Flesch.Kincaid,
                                       text = paste("President:", 
                                                    president,
                                                    "<br>Year:", 
                                                    date,
                                                    "<br>FK Score:",
                                                    Flesch.Kincaid))
            ) +
  geom_point() +
  geom_smooth( method = "loess", se = TRUE)+
  scale_x_continuous(breaks = scales:: breaks_width(25), minor_breaks = NULL) +
  labs(title = "Inagural Speech Complexity Over Time",
    y = "Flesch-Kincaid Grade Level",
       x = "Year") +
  theme_minimal()

ggplotly(p, tooltip = "text")

```

Possible explanations include:

-   Initially, the audience of the inaugural speech was composed of congressional leaders.
-   The first inaugural speech to a public crowd was by James Monroe in 1817.
-   The growing emphasis on mass communication, as presidents began speaking to a broader and more diverse audience.
-   The influence of modern media, which favors shorter, clearer messaging that resonates quickly with the public.

## Website project structure

The website project folder/repo will contain the following files, at a minimum:

-   `_quarto.yml`: A configuration file that controls the YAML content, similar to what we typically see at the top of our qmd files.

    Use this file to add or remove additional subpages, change the overall website title, customize the [navigation bar contents and layout](https://quarto.org/docs/websites/website-navigation.html), change the [website theme](https://quarto.org/docs/output-formats/html-themes.html), and set any other default formatting options such as code chunk options.

-   `index.qmd`: This is the landing page of your website. This file must be called *index.qmd* and must be located in the root directory of the project.

    Use this page, at a minimum, to introduce your project. From there you can either fully include the contents of the project or use additional qmd files to create subpages of your website (perhaps explaining the structure of the website to the user on this landing page).

-   `bib` folder: Contains the bibliography file, which you should edit to include your resources, and a *.csl* file that tells Quarto how to format in-text citations and the bibliography list according to the American Statistical Association citation style.

-   `docs` folder: The rendered content of the website will be located here.

-   `styles.css`: This file is currently empty, but if you want to modify or replace the default theme, do so here using CSS. Students in the past have used custom color palettes or custom fonts, for example.

-   Additional qmd files: If you want to add subpages with their own content, create new qmd files in your root directory to do so, being sure to include them in the list of contents in your `_quarto.yml` file.

### Other recommended content:

Similar to the Shiny project, you will need to organize your wrangling scripts and data. You may also have other images or figures saved for displaying in your blog that will also need to be organized. Here are recommendations for organization.

-   `scripts`: Store wrangling scripts in their own folder

-   `data`: Store datasets in their own folder, being sure to separate raw data from clean/processed data. You can do this in one of two ways: two separate data folders in the root directory (e.g., `raw-data` and `data`) or two subfolders of a single `data` folder (subfolders called, for example, `raw`, `processed`).

-   `images`: Organize saved images or figures together in their own folder. Make sure you keep track of the source of the images or figures and credit the sources in some way in your page (include source in caption and/or link image to source)

## Workflow

1.  Edit contents of any files. Each new qmd file is a self-contained environment, so you will need to load any necessary packages and datasets for rendering that particular file at the top of that file.

2.  After updating a qmd file, **Render** the qmd file. Note that the rendered files (.html etc) are in the `docs` folder. Keep them there!

3.  Commit changes to website and PUSH to publish those changes.

# Citations, cross-referencing, and linking between pages

## Cross-referencing

You should use code chunk labels and in-text [cross-references for figures and tables](https://quarto.org/docs/authoring/cross-references.html#computations) (see the *Knitr* examples at the link).

Quarto additionally provides similar syntax for [creating labels for and cross-referencing equations](https://quarto.org/docs/authoring/cross-references.html#equations), [creating labels for and cross-referencing sections](https://quarto.org/docs/authoring/cross-references.html#sections), and using code chunk options of the form `lst-label: lst-your-listing-label` and `lst-cap: Code chunk caption` to be able to cross-reference displayed code chunks (or "listings") using the syntax `@lst-your-listing-label` within the text.

These are not required for this project but are good practice.

## Creating and linking to subpages

You can create subpages by simply creating new qmd files. Any subpage you want to include on the website should be added to the website navigation list in the `_quarto.yml` file.

You can [link to another page on the website](another-page.qmd) by using just the filepath to the corresponding qmd file. You can also [link directly to a section of a subpage](yet-another-page.qmd#sec-note).

## Creating the bibliography

One of the new challenges of Quarto, relative to a Word or Google doc, is learning how to build a bibliography and use the specified citation keys to write in-text citations.

All items you plan to cite should be added to the `library.bib` bibliography file, which *you can open from within RStudio and edit just like any other text file*. You should use standard bibtex syntax for each entry, following the examples provided. If the resource you are using doesn't already provide a way to generate a bibtex entry, I recommend using [zoterobib](https://zbib.org) to generate the appropriate syntax (must change the Bibliography style to "BibTeX generic citation style"). The entries currently in `library.bib` are intended to provide syntax examples that capture the range of entries you are most likely to use. **You will need to delete and replace the contents of `library.bib` with your own citation entries.**

::: callout-note
The examples in `library.bib` are nicely formatted so you can read and follow the patterns, but formatting and order of the `library.bib` file doesn't actually matter and will not be assessed. Just be sure the citations are as complete as possible (authors, titles, dates, urls, dois, etc.).
:::

``` markdown
@book{hadley2016,
  author = {Hadley, Wickham}, 
  title = {ggplot2: Elegant Graphics for Data Analysis}, 
  url  = {https://ggplot2-book.org},
  publisher = {Springer},
  address = {New York, NY},
  type = {Online book},
  year = {2016},
  edition = {3}
}
```

## Creating in-text citations

Items you cite in the text will be automatically added to a list of References at the bottom of the corresponding page. To cite a reference in the text, use the corresponding *citation key* (the first item in each bibtex entry---it shouldn't have any spaces or special characters) and format the citation using the appropriate [quarto format for in-text citations](https://quarto.org/docs/authoring/citations.html#sec-citations). This is similar to how we cross-reference tables and figures from code chunk labels. For example, the syntax

```         
@hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.
```

produces the following text:

> @hadley2016 provides excellent examples of customizing our visualizations using **ggplot2**.

And the corresponding reference is listed in full at the bottom of this page.

# Quarto website features

Below I demonstrate examples for customizing aspects of your webpage. In the `_quarto.yml` file you'll see additional links and information about customizing the website further.

::: callout-warning
Focus on completing the blog content first! You can play with features and customization *after* you're happy with the contents of the blog.
:::

## Including images or gifs

I would strongly recommend using **knitr**'s `include_graphics()` functions within code chunks to include images or gifs within your blog. This makes it easier to modify figures, add captions and links, and visually find the code for figures quickly if you need to modify something about the output. There is also [markdown syntax to display or embed images](https://quarto.org/docs/authoring/figures.html), but I would typically not recommend it.

```{r}
#| fig-cap: "Image courtesy of giphy.com"
#| fig-align: center
#| out-width: 100%
#| fig-link: "https://giphy.com/gifs/insecurehbo-3og0IT6sIWd1eh7bJm"

include_graphics("https://i.giphy.com/3og0IT6sIWd1eh7bJm.webp")
```

Either approach will take either a filepath to a stored file or a URL to an image or gif. Width can be specified as a percentage of the width of the page (0% to 100%; my preferred approach) or as a fixed number of units (e.g. 400px, 3in, 10cm).

I can't imagine a scenario where students should or would include videos within their blog, but Quarto provides [guidance on embedding videos](https://quarto.org/docs/authoring/videos.html), as well.

::: callout-note
The first figure of your blog will be used as the display image on our course's landing page!
:::

## Panel tabsets

Use the following format to add information or tables or visualizations in [tabset panels](https://quarto.org/docs/interactive/layout.html#tabset-panel).

::: panel-tabset
### Tab 1

Some information in one tab

### Tab 2

Some information in a different tab
:::

## Panel layouts for content

Use the following format to have more control over the [panel layout](https://quarto.org/docs/authoring/figures.html#complex-layouts) of various components.

The syntax "\[ \[1\], \[1,1\] \]" indicates that we have three pieces of content that we want to spread across two rows. The first piece of content will be in its own row, and then the next two components will be split across two columns of equal width in a second row.

::: {layout="[ [1], [1,1] ]"}
### Row 1 with only one output

Some content

### First column of row 2

Some other content

### Second column of row 2

Some additional content.
:::

The values provided within each row specify the relative widths of the content within that row. For example "\[1,2,1\]" would create a row with 3 columns where the first and third columns are the same width and the middle column is twice as wide.

## Layouts for tables and visualizations produced by code chunks

For details on how to layout subfigures from multiple graphs produced by the same code chunk, see the examples in the **Knitr** tabs of the sections on [figure layouts, subcaptions, and custom layouts](https://quarto.org/docs/authoring/figures.html#layout).

The same syntax shown across the linked examples can be used to create subtables by replacing `fig-cap` and `fig-subcap` with `tbl-cap` and `tbl-subcap`.

Two examples in @tbl-layout and @fig-layout below are borrowed and slightly modified from the linked sections.

```{r}
#| label: tbl-layout
#| tbl-cap: "Two tables side-by-side"
#| tbl-subcap: 
#|   - "First three rows of cars dataset"
#|   - "First three rows of pressure dataset"
#| layout-ncol: 2

cars |> 
  slice(1:3) |> 
  kable()

pressure |> 
  slice(1:3) |> 
  kable()
```

```{r}
#| label: fig-layout
#| fig-cap: "Three figures in a complex layout"
#| fig-subcap: 
#|   - "cars"
#|   - "pressure"
#|   - "mtcars"
#| layout: [[4, -1, 4], [1]] 

ggplot(cars, aes(speed, dist)) +
  geom_point()

ggplot(pressure, aes(temperature, pressure)) +
  geom_point()

ggplot(mtcars, aes(hp, mpg)) +
  geom_point()
```
