---
title: "other-other-page"
format: html
---

```{r}
library(ggplot2)
library(tidyverse)
library(plotly)
```

## Plotting mean sentence length over time plot with a bar chart

```{r}
# ggplot(inaug_speeches_master, aes(x = date, y = meanSentenceLength, fill = meanSentenceLength)) +
#   geom_col(show.legend = FALSE) +
#   scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
#   labs(
#     title = "Mean Sentence Length of Inaugural Speeches",
#     x = "Year",
#     y = "Mean Sentence Length"
#   ) +
#   theme_minimal()


ms <- ggplot(inaug_speeches_master, aes(
  x = date, y = meanSentenceLength,
  text = paste("President:", president,
               "<br>Year:", date,
               "<br>Mean Sentence Length:", round(meanSentenceLength, 3)),
  fill = meanSentenceLength)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
  labs(
    title = "Mean Sentence Length of Inaugural Speeches",
    x = "Year",
    y = "Mean Sentence Length"
  ) +
  theme_minimal()

ggplotly(ms, tooltip = "text")


## Plotting readability/Flesh-Kincaid over time plot with a bar chart

# ggplot(inaug_speeches_master, aes(x = date, y = Flesch.Kincaid, fill = Flesch.Kincaid)) +
#   geom_col(show.legend = FALSE) +
#   scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
#   labs(
#     title = "Flesh-Kincaid score of Inaugural Speeches",
#     x = "Year",
#     y = "Flesh-Kincaid score"
#   ) +
#   theme_minimal()


fk <- ggplot(inaug_speeches_master, aes(
  x = date, y = Flesch.Kincaid,
  text = paste("President:", president,
               "<br>Year:", date,
               "<br>Flesch.Kincaid:", round(Flesch.Kincaid, 3)),
  fill = Flesch.Kincaid)) +
  geom_col(show.legend = FALSE) +
  scale_fill_gradient2(low = "#d61106", mid = "#d6d6d6", high = "#05853c", midpoint = 0) + 
  labs(
    title = "Flesch-Kincaid score of Inaugural Speeches",
    x = "Year",
    y = "Flesch-Kincaid score"
  ) +
  theme_minimal()

ggplotly(fk, tooltip = "text")



# Top 5 presidents with the hardest inaugural speech (highest Flesch-Kincaid score)
 
 top5_highpress <- inaug_speeches_master |>
  arrange(desc(Flesch.Kincaid)) |>
  select(president, date, Flesch.Kincaid) |>
  slice_head(n = 5)
top5_highpress
 
 
# Top 5 Presidents with the easiest inaugural speech (lowest Flesch-Kincaid score)
 top5_lowpress <- inaug_speeches_master |>
  arrange(Flesch.Kincaid) |>
  select(president, date, Flesch.Kincaid) |>
  slice_head(n = 5)
top5_lowpress

top5_press <- full_join(top5_highpress, top5_lowpress)

 
 # table displaying the top 5 presidents with the highest Flesch-Kincaid score 

 top5_lowpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()

 
  # table displaying the top 5 presidents with the lowest Flesch-Kincaid scores 
 
  top5_highpress |>
  kable(booktabs = TRUE, 
        digits = 2,
        col.names = c("President", "Year", "Flesch-Kincaid Score")) |>
  kable_styling()
  
  
```


```{r}
# Mean Sentence Length vs. Sentiment

#| label: Plotting-Flesch-Kincaid-vs-Sentiment


# Make sure to set seed for reproducibility!
set.seed(100)

msl_kmeans_results <- inaug_speeches_master |> 
  # Can only include numeric variables that we are clustering by
  select(meanSentenceLength, sentiment) |> 
  kmeans(centers = 6, nstart = 10) 

# Check named elements of object
names(msl_kmeans_results)

# Centroids
msl_kmeans_results$centers

# Cluster sizes
msl_kmeans_results$size


# Join cluster assignments with original dataset (requires the broom package)
msl_clustered <- msl_kmeans_results |> 
  augment(inaug_speeches_master) |> 
  mutate(cluster_2 = factor(.cluster))

# Make dataframe out of estimated cluster centroids
msl_cluster_centers <- msl_kmeans_results$centers |>
  as_tibble() |> 
  mutate(cluster_2 = factor(row_number()))

# Plot cluster assignments and centroids
ggplot(msl_clustered, aes(x = sentiment, y = meanSentenceLength)) +
  geom_point(aes(color = cluster_2), alpha = 0.6)  + 
  geom_label(data = msl_cluster_centers, 
             aes(label = cluster_2), 
             size = 3) + 
  theme_classic() +
  theme(legend.position = "none") 



MS_s <- ggplot(msl_clustered, aes(x = sentiment, y = meanSentenceLength)) +
  geom_point(aes(color = cluster_2, 
                 text = paste("Sentiment:", sentiment,
                              "<br>Mean Sentence Length:", meanSentenceLength,
                              "<br>Cluster:", cluster_2)), 
             alpha = 0.6) +
  geom_label(data = msl_cluster_centers, 
             aes(label = cluster_2, 
                 text = paste("Cluster Center:", cluster_2)), 
             size = 3) +
  labs(y = "Mean Sentence Length",
       x = "Sentiment Score",
        title = "Inaugural Address Analysis",
       subtitle = "Mean Sentence Length vs Sentiment Score",
       color = "Cluster") +
  theme_minimal()

ggplotly(MS_s, tooltip = "text")


```




